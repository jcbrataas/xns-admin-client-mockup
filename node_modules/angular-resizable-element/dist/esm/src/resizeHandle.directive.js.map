{"version":3,"file":"resizeHandle.directive.js","sourceRoot":"","sources":["../../../src/resizeHandle.directive.ts"],"names":[],"mappings":"OAAO,EAAE,SAAS,EAAE,KAAK,EAAE,YAAY,EAAE,MAAM,eAAe;AAG9D;;;;;;;;;;GAUG;AAEH;IAAA;QAEE;;WAEG;QACF,gBAAW,GAAU,EAAE,CAAC;IAiD3B,CAAC;IA1CC;;OAEG;IAGH,kCAAW,GAAX,UAAY,MAAc,EAAE,MAAc;QACxC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,IAAI,CAAC,EAAC,cAAM,EAAE,cAAM,EAAE,KAAK,EAAE,IAAI,CAAC,WAAW,EAAC,CAAC,CAAC;IAC3E,CAAC;IAED;;OAEG;IAGH,kCAAW,GAAX,UAAY,KAAiB,EAAE,MAAc,EAAE,MAAc;QAC3D,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,IAAI,CAAC,EAAC,cAAM,EAAE,cAAM,EAAE,KAAK,EAAE,IAAI,CAAC,WAAW,EAAE,YAAK,EAAC,CAAC,CAAC;IAClF,CAAC;IAED;;OAEG;IAIH,gCAAS,GAAT,UAAU,MAAc,EAAE,MAAc;QACtC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,EAAC,cAAM,EAAE,cAAM,EAAE,KAAK,EAAE,IAAI,CAAC,WAAW,EAAC,CAAC,CAAC;IACzE,CAAC;IAEI,uBAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;oBACxB,QAAQ,EAAE,mBAAmB;iBAC9B,EAAG,EAAE;KACL,CAAC;IACF,kBAAkB;IACX,2BAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IACK,2BAAc,GAA2C;QAChE,aAAa,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QACjC,aAAa,EAAE,CAAC,EAAE,IAAI,EAAE,YAAY,EAAE,IAAI,EAAE,CAAC,YAAY,EAAE,CAAC,2BAA2B,EAAE,2BAA2B,CAAC,EAAG,EAAE,EAAC,EAAE,IAAI,EAAE,YAAY,EAAE,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC,gBAAgB,EAAE,gBAAgB,CAAC,EAAG,EAAE,EAAE;QAChN,aAAa,EAAE,CAAC,EAAE,IAAI,EAAE,YAAY,EAAE,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC,QAAQ,EAAE,iCAAiC,EAAE,iCAAiC,CAAC,EAAG,EAAE,EAAC,EAAE,IAAI,EAAE,YAAY,EAAE,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC,QAAQ,EAAE,gBAAgB,EAAE,gBAAgB,CAAC,EAAG,EAAE,EAAE;QAC/O,WAAW,EAAE,CAAC,EAAE,IAAI,EAAE,YAAY,EAAE,IAAI,EAAE,CAAC,UAAU,EAAE,CAAC,kCAAkC,EAAE,kCAAkC,CAAC,EAAG,EAAE,EAAC,EAAE,IAAI,EAAE,YAAY,EAAE,IAAI,EAAE,CAAC,aAAa,EAAE,CAAC,kCAAkC,EAAE,kCAAkC,CAAC,EAAG,EAAE,EAAC,EAAE,IAAI,EAAE,YAAY,EAAE,IAAI,EAAE,CAAC,SAAS,EAAE,CAAC,gBAAgB,EAAE,gBAAgB,CAAC,EAAG,EAAE,EAAE;KACjV,CAAC;IACF,mBAAC;AAAD,CAAC,AAtDD,IAsDC","sourcesContent":["import { Directive, Input, HostListener } from '@angular/core';\nimport { Edges, Resizable } from './resizable.directive';\n\n/**\n * An element placed inside a `mwlResizable` directive to be used as a drag and resize handle\n *\n * For example\n *\n * ```\n * &lt;div mwlResizable&gt;\n *   &lt;div mwlResizeHandle [resizeEdges]=\"{bottom: true, right: true}\"&gt;&lt;/div&gt;\n * &lt;/div&gt;\n * ```\n */\n\nexport class ResizeHandle {\n\n  /**\n   * The `Edges` object that contains the edges of the parent element that dragging the handle will trigger a resize on\n   */\n   resizeEdges: Edges = {};\n\n  /**\n   * @private\n   */\n  public resizable: Resizable; // set by the parent mwlResizable directive\n\n  /**\n   * @private\n   */\n  \n  \n  onMousedown(mouseX: number, mouseY: number): void {\n    this.resizable.mousedown.next({mouseX, mouseY, edges: this.resizeEdges});\n  }\n\n  /**\n   * @private\n   */\n  \n  \n  onMousemove(event: MouseEvent, mouseX: number, mouseY: number): void {\n    this.resizable.mousemove.next({mouseX, mouseY, edges: this.resizeEdges, event});\n  }\n\n  /**\n   * @private\n   */\n  \n  \n  \n  onMouseup(mouseX: number, mouseY: number): void {\n    this.resizable.mouseup.next({mouseX, mouseY, edges: this.resizeEdges});\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mwlResizeHandle]'\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'resizeEdges': [{ type: Input },],\n'onMousedown': [{ type: HostListener, args: ['touchstart', ['$event.touches[0].clientX', '$event.touches[0].clientY'], ] },{ type: HostListener, args: ['mousedown', ['$event.clientX', '$event.clientY'], ] },],\n'onMousemove': [{ type: HostListener, args: ['touchmove', ['$event', '$event.targetTouches[0].clientX', '$event.targetTouches[0].clientY'], ] },{ type: HostListener, args: ['mousemove', ['$event', '$event.clientX', '$event.clientY'], ] },],\n'onMouseup': [{ type: HostListener, args: ['touchend', ['$event.changedTouches[0].clientX', '$event.changedTouches[0].clientY'], ] },{ type: HostListener, args: ['touchcancel', ['$event.changedTouches[0].clientX', '$event.changedTouches[0].clientY'], ] },{ type: HostListener, args: ['mouseup', ['$event.clientX', '$event.clientY'], ] },],\n};\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}